
switchassign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000500  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000500  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00001500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000504  08000504  00001504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000508  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ea5  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000045f  00000000  00000000  00002ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00003338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001829e  00000000  00000000  000034b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001508  00000000  00000000  0001b755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b711  00000000  00000000  0001cc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a836e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000020c  00000000  00000000  000a83b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a85c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000048  00000000  00000000  000a85df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004e8 	.word	0x080004e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004e8 	.word	0x080004e8

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <SET_LED>:
 *  Created on: Sep 20, 2024
 *      Author: sunbeam
 */
#include"led.h"

void SET_LED(uint32_t port){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(CLK);
 8000220:	4b22      	ldr	r3, [pc, #136]	@ (80002ac <SET_LED+0x94>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a21      	ldr	r2, [pc, #132]	@ (80002ac <SET_LED+0x94>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER &=~BV(port*2+1);
 800022c:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <SET_LED+0x98>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	3201      	adds	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a1b      	ldr	r2, [pc, #108]	@ (80002b0 <SET_LED+0x98>)
 8000242:	400b      	ands	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=BV(port*2);
 8000246:	4b1a      	ldr	r3, [pc, #104]	@ (80002b0 <SET_LED+0x98>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a16      	ldr	r2, [pc, #88]	@ (80002b0 <SET_LED+0x98>)
 8000258:	430b      	orrs	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &=~BV(port);
 800025c:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <SET_LED+0x98>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	43d2      	mvns	r2, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a10      	ldr	r2, [pc, #64]	@ (80002b0 <SET_LED+0x98>)
 800026e:	400b      	ands	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &=~BV(port*2+1);
 8000272:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <SET_LED+0x98>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	3201      	adds	r2, #1
 800027c:	2101      	movs	r1, #1
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <SET_LED+0x98>)
 8000288:	400b      	ands	r3, r1
 800028a:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |=BV(port*2);
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <SET_LED+0x98>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	0052      	lsls	r2, r2, #1
 8000294:	2101      	movs	r1, #1
 8000296:	fa01 f202 	lsl.w	r2, r1, r2
 800029a:	4611      	mov	r1, r2
 800029c:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <SET_LED+0x98>)
 800029e:	430b      	orrs	r3, r1
 80002a0:	6093      	str	r3, [r2, #8]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020c00 	.word	0x40020c00

080002b4 <ON>:
void ON(uint32_t port){
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	GPIOD->ODR |=BV(port);
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <ON+0x28>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	2101      	movs	r1, #1
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <ON+0x28>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6153      	str	r3, [r2, #20]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40020c00 	.word	0x40020c00

080002e0 <OFF>:

void OFF(uint32_t port){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	GPIOD->ODR &=~BV(port);
 80002e8:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <OFF+0x28>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	2101      	movs	r1, #1
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	43d2      	mvns	r2, r2
 80002f6:	4611      	mov	r1, r2
 80002f8:	4a03      	ldr	r2, [pc, #12]	@ (8000308 <OFF+0x28>)
 80002fa:	400b      	ands	r3, r1
 80002fc:	6153      	str	r3, [r2, #20]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40020c00 	.word	0x40020c00

0800030c <blink>:

void blink(uint32_t port,uint32_t delayms){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
	ON(port);
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ffcc 	bl	80002b4 <ON>
	DelayMs(delayms);
 800031c:	6838      	ldr	r0, [r7, #0]
 800031e:	f7ff ff53 	bl	80001c8 <DelayMs>
	OFF(port);
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f7ff ffdc 	bl	80002e0 <OFF>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <main>:

// Orange LED -- GPIOD pin 13.
//	1 -- Led On
//	0 -- Led Off

int main(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
	SystemInit();
 8000336:	f000 f853 	bl	80003e0 <SystemInit>
	switchinit();
 800033a:	f000 f81f 	bl	800037c <switchinit>
	int count =12;
 800033e:	230c      	movs	r3, #12
 8000340:	607b      	str	r3, [r7, #4]
while(1){
for(count=12;count<16;count++){
 8000342:	230c      	movs	r3, #12
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	e012      	b.n	800036e <main+0x3e>
	SET_LED(count);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff64 	bl	8000218 <SET_LED>

		while(switchispressed()==0);
 8000350:	bf00      	nop
 8000352:	f000 f82f 	bl	80003b4 <switchispressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0fa      	beq.n	8000352 <main+0x22>
		blink(count,1000);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ffd2 	bl	800030c <blink>
for(count=12;count<16;count++){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3301      	adds	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	dde9      	ble.n	8000348 <main+0x18>

}
count=12;
 8000374:	230c      	movs	r3, #12
 8000376:	607b      	str	r3, [r7, #4]
for(count=12;count<16;count++){
 8000378:	e7e3      	b.n	8000342 <main+0x12>
	...

0800037c <switchinit>:

#include <stdio.h>
#include "stm32f4xx.h"
#include "switch.h"

void switchinit(void){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=BV(0);
 8000380:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <switchinit+0x30>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a09      	ldr	r2, [pc, #36]	@ (80003ac <switchinit+0x30>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(BV(PIN*2)|BV(PIN*2+1));
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <switchinit+0x34>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <switchinit+0x34>)
 8000392:	f023 0303 	bic.w	r3, r3, #3
 8000396:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~(BV(PIN*2)|BV(PIN*2+1));
 8000398:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <switchinit+0x34>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <switchinit+0x34>)
 800039e:	f023 0303 	bic.w	r3, r3, #3
 80003a2:	60d3      	str	r3, [r2, #12]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020000 	.word	0x40020000

080003b4 <switchispressed>:

int switchispressed(void){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0

	uint32_t idr = GPIOA->IDR;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <switchispressed+0x28>)
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	607b      	str	r3, [r7, #4]
	if ((idr & BV(PIN))== 0)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d101      	bne.n	80003ce <switchispressed+0x1a>
		return  0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	e000      	b.n	80003d0 <switchispressed+0x1c>
	return 1;
 80003ce:	2301      	movs	r3, #1
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40020000 	.word	0x40020000

080003e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  DWT_Init();
 80003e4:	f000 f802 	bl	80003ec <DWT_Init>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <DWT_Init+0x58>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a13      	ldr	r2, [pc, #76]	@ (8000444 <DWT_Init+0x58>)
 80003f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003fa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <DWT_Init+0x58>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a10      	ldr	r2, [pc, #64]	@ (8000444 <DWT_Init+0x58>)
 8000402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000406:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <DWT_Init+0x5c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0e      	ldr	r2, [pc, #56]	@ (8000448 <DWT_Init+0x5c>)
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000414:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <DWT_Init+0x5c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0b      	ldr	r2, [pc, #44]	@ (8000448 <DWT_Init+0x5c>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <DWT_Init+0x5c>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000426:	bf00      	nop
    __ASM volatile ("NOP");
 8000428:	bf00      	nop
    __ASM volatile ("NOP");
 800042a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <DWT_Init+0x5c>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	2b00      	cmp	r3, #0
 8000432:	bf0c      	ite	eq
 8000434:	2301      	moveq	r3, #1
 8000436:	2300      	movne	r3, #0
 8000438:	b2db      	uxtb	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000edf0 	.word	0xe000edf0
 8000448:	e0001000 	.word	0xe0001000

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	@ (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000450:	f7ff ffc6 	bl	80003e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	@ (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	@ (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	@ (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	@ (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 f811 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff ff57 	bl	8000330 <main>

08000482 <LoopForever>:

LoopForever:
  b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000490:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 8000494:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000498:	20000020 	.word	0x20000020

0800049c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC_IRQHandler>
	...

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	4d0d      	ldr	r5, [pc, #52]	@ (80004d8 <__libc_init_array+0x38>)
 80004a4:	4c0d      	ldr	r4, [pc, #52]	@ (80004dc <__libc_init_array+0x3c>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	2600      	movs	r6, #0
 80004ac:	42a6      	cmp	r6, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	4d0b      	ldr	r5, [pc, #44]	@ (80004e0 <__libc_init_array+0x40>)
 80004b2:	4c0c      	ldr	r4, [pc, #48]	@ (80004e4 <__libc_init_array+0x44>)
 80004b4:	f000 f818 	bl	80004e8 <_init>
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	2600      	movs	r6, #0
 80004be:	42a6      	cmp	r6, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c8:	4798      	blx	r3
 80004ca:	3601      	adds	r6, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d2:	4798      	blx	r3
 80004d4:	3601      	adds	r6, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
