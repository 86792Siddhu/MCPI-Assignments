
DAC_Trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  08000404  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  08000404  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000408  08000408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800040c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001313  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050c  00000000  00000000  00003341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  00003850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000090  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f9b  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001384  00000000  00000000  0001c95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bced  00000000  00000000  0001dcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a99cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001dc  00000000  00000000  000a9a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  000a9c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003ec 	.word	0x080003ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003ec 	.word	0x080003ec

080001c8 <DAC_Init>:
Date: Oct 2, 2024
*/

#include "dac.h"
#include "timer.h"
void DAC_Init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	//1. Enable GPIOA peripheral. (DAC1_OUT=PA4)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <DAC_Init+0x38>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <DAC_Init+0x38>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	//2. Set GPIO mode to Analog. (MODER = 0b11).
	GPIOA->MODER |= BV(4*2) | BV(4*2+1);
 80001d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <DAC_Init+0x3c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a09      	ldr	r2, [pc, #36]	@ (8000204 <DAC_Init+0x3c>)
 80001de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80001e2:	6013      	str	r3, [r2, #0]
	//3. Enable DAC peripheral (APB1).
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80001e4:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <DAC_Init+0x38>)
 80001e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001e8:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <DAC_Init+0x38>)
 80001ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80001ee:	6413      	str	r3, [r2, #64]	@ 0x40
	//4. Enable DAC channel, Output buffer, Enable trigger, and select Trigger (Software=0b111) (CR).
	DAC1->CR = DAC_CR_EN1 | DAC_CR_TEN1 | DAC_CR_TSEL1_0 | DAC_CR_TSEL1_1 | DAC_CR_TSEL1_2;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <DAC_Init+0x40>)
 80001f2:	223d      	movs	r2, #61	@ 0x3d
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023800 	.word	0x40023800
 8000204:	40020000 	.word	0x40020000
 8000208:	40007400 	.word	0x40007400

0800020c <DAC_SetValue>:

void DAC_SetValue(uint16_t val) {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	80fb      	strh	r3, [r7, #6]
	//1. Set value in DAC register. (DHRxR)
	DAC1->DHR12R1 = val;
 8000216:	4a07      	ldr	r2, [pc, #28]	@ (8000234 <DAC_SetValue+0x28>)
 8000218:	88fb      	ldrh	r3, [r7, #6]
 800021a:	6093      	str	r3, [r2, #8]
	//2. Trigger conversion (in SWTRIGR).
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800021c:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <DAC_SetValue+0x28>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	@ (8000234 <DAC_SetValue+0x28>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6053      	str	r3, [r2, #4]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40007400 	.word	0x40007400

08000238 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000240:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <DelayMs+0x44>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000246:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <DelayMs+0x48>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a0e      	ldr	r2, [pc, #56]	@ (8000284 <DelayMs+0x4c>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	099b      	lsrs	r3, r3, #6
 8000252:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68ba      	ldr	r2, [r7, #8]
 8000258:	fb02 f303 	mul.w	r3, r2, r3
 800025c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800025e:	bf00      	nop
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <DelayMs+0x44>)
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	1ad2      	subs	r2, r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	429a      	cmp	r2, r3
 800026c:	d3f8      	bcc.n	8000260 <DelayMs+0x28>
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e0001000 	.word	0xe0001000
 8000280:	20000000 	.word	0x20000000
 8000284:	10624dd3 	.word	0x10624dd3

08000288 <main>:
#include "timer.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	int val;
	SystemInit();
 800028e:	f000 f815 	bl	80002bc <SystemInit>
	DAC_Init();
 8000292:	f7ff ff99 	bl	80001c8 <DAC_Init>
	while(1) {
		for(val = 0; val < 4096; val += 16) {
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e00a      	b.n	80002b2 <main+0x2a>
			DAC_SetValue(val);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	b29b      	uxth	r3, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ffb3 	bl	800020c <DAC_SetValue>
			DelayMs(4);
 80002a6:	2004      	movs	r0, #4
 80002a8:	f7ff ffc6 	bl	8000238 <DelayMs>
		for(val = 0; val < 4096; val += 16) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3310      	adds	r3, #16
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002b8:	dbf0      	blt.n	800029c <main+0x14>
 80002ba:	e7ec      	b.n	8000296 <main+0xe>

080002bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  DWT_Init();
 80002c0:	f000 f802 	bl	80002c8 <DWT_Init>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002cc:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <DWT_Init+0x58>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <DWT_Init+0x58>)
 80002d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002d6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002d8:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <DWT_Init+0x58>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <DWT_Init+0x58>)
 80002de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002e2:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <DWT_Init+0x5c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <DWT_Init+0x5c>)
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <DWT_Init+0x5c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <DWT_Init+0x5c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <DWT_Init+0x5c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000302:	bf00      	nop
    __ASM volatile ("NOP");
 8000304:	bf00      	nop
    __ASM volatile ("NOP");
 8000306:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <DWT_Init+0x5c>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
}
 8000316:	4618      	mov	r0, r3
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000edf0 	.word	0xe000edf0
 8000324:	e0001000 	.word	0xe0001000

08000328 <TIM6_DAC_IRQHandler>:
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
	//* Start Timer in CR1.
	TIM6->CR1 |= TIM_CR1_CEN;
}

void TIM6_DAC_IRQHandler(void) {
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	//* Check if UIF flag is set (in SR).
	if(TIM6->SR & TIM_SR_UIF) {
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <TIM6_DAC_IRQHandler+0x24>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <TIM6_DAC_IRQHandler+0x1c>
		//* Clear UIF in SR (Ack)
		TIM6->SR &= ~TIM_SR_UIF;
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <TIM6_DAC_IRQHandler+0x24>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a03      	ldr	r2, [pc, #12]	@ (800034c <TIM6_DAC_IRQHandler+0x24>)
 800033e:	f023 0301 	bic.w	r3, r3, #1
 8000342:	6113      	str	r3, [r2, #16]
		//* Perform interrupt handling -- Toggle LED
		//LedToggle(LED_BLUE_PIN);
	}
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40001000 	.word	0x40001000

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f7ff ffb2 	bl	80002bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	@ (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	@ (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	@ (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff81 	bl	8000288 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800039c:	20000020 	.word	0x20000020

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	@ (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	@ (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	@ (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	@ (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
